# -*- coding: utf-8 -*-
#!/usr/bin/env python
"""
Created on Sat Oct 26 15:26:03 2019

@author: cw817615
"""

import numpy as np
import random
import matplotlib.pyplot as plt

plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
plt.rcParams['axes.unicode_minus']=False #用来正常显示负号

'''
def fit_fun(X):
    A = 1
    return 2 * A + X[0] ** 2 - A * np.cos(2 * np.pi * X[0]) + X[1] ** 2 - A * np.cos(2 * np.pi * X[1])
'''
def fit_fun(X):  # 适应函数
    return -np.abs(np.sin(X[0]) * np.cos(X[1]) * np.exp(np.abs(1 - np.sqrt(X[0] ** 2 + X[1] ** 2) / np.pi)))


class Unit:
    '''个体类'''
    
    def __init__(self, x_min, x_max, dim):
        '''
        初始化方法，参数含义如下：
        params: x_min:某一维的最小值
        params: x_max:某一维的最大值
        params: dim:维度数
        '''
        # 将个体的信息全部设置为私有变量
        # 个体的初始化向量，random为(0,1)之间的随机数
        self.__pos = np.array([x_min + random.random()*(x_max - x_min) for i in range(dim)])
        # 个体突变后的向量
        self.__mutation = np.array([0.0 for i in range(dim)])  
        # 个体交叉后的向量
        self.__crossover = np.array([0.0 for i in range(dim)])  
        # 个体适应度
        self.__fitnessValue = fit_fun(self.__pos)  

    def set_pos(self, i, value):
        # 修改个体向量的第i个值为value
        self.__pos[i] = value

    def get_pos(self):
        # 添加一个获取个体向量的接口
        return self.__pos

    def set_mutation(self, i, value):
        # 个体变异
        self.__mutation[i] = value

    def get_mutation(self):
        # 获取个体变异后的向量
        return self.__mutation

    def set_crossover(self, i, value):
        # 个体交叉
        self.__crossover[i] = value

    def get_crossover(self):
        # 获取个体交叉后的向量
        return self.__crossover

    def set_fitness_value(self, value):
        # 设置个体的适应度
        self.__fitnessValue = value

    def get_fitness_value(self):
        # 获取适应度
        return self.__fitnessValue



class DE:
    '''差分进化算法类'''
    
    def __init__(self, dim, size, iter_num, x_min, x_max, best_fitness_value=float('Inf'), F=0.5, CR=0.8):
        '''
        参数释义如下：
        dim:维度
        size:总群个数
        iter_num:迭代次数
        x_min:个体某一维最小值
        x_max:个体某一维最大值
        best_fitness_value:最佳的适应度值，初始设置为无穷大
        best_position:全局最优解，为1*dim维的向量
        fitness_val_list:每次迭代最优适应值
        F:缩放因子，一般在[0,2]之间选择，通常取0.5，主要影响算法的全局寻优能力
        CR:交叉概率(或称交叉系数)，取值范围为[0,1]之间的随机浮点数
        '''
        self.F = F
        self.CR = CR
        self.dim = dim  
        self.size = size  
        self.iter_num = iter_num  
        self.x_min = x_min
        self.x_max = x_max
        self.best_fitness_value = best_fitness_value
        self.best_position = [0.0 for i in range(dim)]  
        self.fitness_val_list = []  

        # 对种群进行初始化
        self.unit_list = [Unit(self.x_min, self.x_max, self.dim) for i in range(self.size)]

    ##----------------------------基础操作区-------------------------------##
    def get_kth_unit(self, k):
        # 获取种群中第k+1个个体
        return self.unit_list[k]

    def set_bestFitnessValue(self, value):
        # 设置最优适应度
        self.best_fitness_value = value

    def get_bestFitnessValue(self):
        # 获取最优适应度
        return self.best_fitness_value

    def set_bestPosition(self, i, value):
        # 设置全局最优解
        self.best_position[i] = value

    def get_bestPosition(self):
        # 获取全局最优解
        return self.best_position


    ##----------------------------进化区----------------------------------##
    def mutation_fun(self):
        '''变异'''
        # 变异操作，对第g代随机抽取三个组成一个新的个体，对于第i个新个体来说，原来的第i个个体与它没有关系
        for i in range(self.size):
            # 获取进行交叉运算的个体，个体下标分别为r1,r2,r3
            r1 = r2 = r3 = 0
            # 保证获取不同的个体且与i不等
            while r1 == i or r2 == i or r3 == i or r2 == r1 or r3 == r1 or r3 == r2:
                r1 = random.randint(0, self.size - 1)  # 随机数范围为[0,size-1]的整数
                r2 = random.randint(0, self.size - 1)
                r3 = random.randint(0, self.size - 1)
            
            # 进行变异操作:v_i = x_r1 + F * (x_r2 - x_r3),mutation为1*dim维向量
            mutation = self.get_kth_unit(r1).get_pos() + \
                       self.F * (self.get_kth_unit(r2).get_pos() - self.get_kth_unit(r3).get_pos())
            
            for j in range(self.dim):
                #  判断变异后的值是否满足边界条件，不满足需重新生成
                if self.x_min <= mutation[j] <= self.x_max:
                    # 满足边界条件则将第i个个体的第j个值变异位mutation[j]
                    self.get_kth_unit(i).set_mutation(j, mutation[j])
                    
                else:
                    rand_value = self.x_min + random.random()*(self.x_max - self.x_min)
                    self.get_kth_unit(i).set_mutation(j, rand_value)


    def crossover(self):
        '''交叉'''
        # 我们的交叉是对变异种群和原始种群做交叉
        for unit in self.unit_list:
            for j in range(self.dim):
                
                rand_j = random.randint(0, self.dim - 1)  
                rand_float = random.random()   # 交叉概率
                
                if rand_float <= self.CR or rand_j == j:
                    # 交叉，即赋变异种群的值
                    unit.set_crossover(j, unit.get_mutation()[j])
                    
                # 不交叉，即赋原始种群的值
                else:
                    unit.set_crossover(j, unit.get_pos()[j])


    def selection(self):
        '''选择'''
        # 主要是将原始种群与经过变异交叉之后的种群做比较，选择优良个体
        for unit in self.unit_list:
            # 计算交叉个体的适应度
            new_fitness_value = fit_fun(unit.get_crossover())  
            
            # 修正个体最优，适应度小为优
            if new_fitness_value < unit.get_fitness_value():
                unit.set_fitness_value(new_fitness_value)
                for i in range(self.dim):
                    unit.set_pos(i, unit.get_crossover()[i])
                    
            # 修正种群最优
            if new_fitness_value < self.get_bestFitnessValue():
                self.set_bestFitnessValue(new_fitness_value)
                for j in range(self.dim):
                    self.set_bestPosition(j, unit.get_crossover()[j])

    ##--------------------------运行区---------------------------------##
    def run(self):
        '''运行DE算法'''
        for i in range(self.iter_num):
            self.mutation_fun()
            self.crossover()
            self.selection()
            # 收集每一代最优个体的适应度，以用于绘图
            self.fitness_val_list.append(self.get_bestFitnessValue())
    
    def show_result(self):
        # 绘制适应度随代数变化的情况
        plt.plot(range(self.iter_num),self.fitness_val_list,c="G",alpha=0.5)
        plt.title('DE算法适应度变化情况')
        plt.xlabel('iter_num')
        plt.ylabel('fitness')
        plt.show()
        
    def print_result(self):
        # 输出最优解
        print('运行结果......')
        print('该最小值问题的最优函数值:',self.best_fitness_value)
        print('该问题的最优解向量:',self.best_position)			


    

def main():

    dim = 15   # 粒子维度，在广义指派问题中为task数量
    size = 15   # 种群大小
    iter_num = 1000   #迭代次数
    x_max = 10     # 初始整数在(-10,10)之间
    
    de = DE(dim, size, iter_num, -x_max, x_max)
    de.run()
    de.show_result()
    de.print_result()


if __name__ == "__main__":
    main()
	
		
		
		
		
		